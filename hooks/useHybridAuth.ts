"use client"

import { useState, useEffect } from "react"

interface HybridAuthResult {
  token: string | null
  fid: string | null
  username: string | null
  displayName: string | null
  pfpUrl: string | null
  bio: string | null
  followerCount: number
  followingCount: number
  isLoading: boolean
  error: string | null
  isAuthenticated: boolean
  refreshUserData: () => Promise<void>
  isRefreshing: boolean
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createDemoUser() {
  const demoId = Math.floor(Math.random() * 10000).toString()
  return {
    fid: demoId,
    username: `demo_user_${demoId}`,
    displayName: `Demo User ${demoId}`,
    pfpUrl: null,
    bio: "Demo user for testing",
    followerCount: Math.floor(Math.random() * 1000),
    followingCount: Math.floor(Math.random() * 500),
    token: `demo_token_${demoId}`,
  }
}

export function useHybridAuth(): HybridAuthResult {
  const [token, setToken] = useState<string | null>(null)
  const [fid, setFid] = useState<string | null>(null)
  const [username, setUsername] = useState<string | null>(null)
  const [displayName, setDisplayName] = useState<string | null>(null)
  const [pfpUrl, setPfpUrl] = useState<string | null>(null)
  const [bio, setBio] = useState<string | null>(null)
  const [followerCount, setFollowerCount] = useState(0)
  const [followingCount, setFollowingCount] = useState(0)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [isRefreshing, setIsRefreshing] = useState(false)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
  const saveUserData = (userData: {
    fid: string
    username: string
    displayName: string
    pfpUrl: string | null
    bio: string | null
    followerCount: number
    followingCount: number
    token?: string
  }) => {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥–æ—Å—Ç–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userData.fid && !userData.fid.startsWith("guest")) {
        localStorage.removeItem("farcasterUser")
        console.log("üßπ Cleared old guest user data for real user:", userData.username)
      }

      localStorage.setItem("hybridUser", JSON.stringify(userData))
      localStorage.setItem("fc_fid", userData.fid)
      localStorage.setItem("fc_username", userData.username)
      localStorage.setItem("fc_display_name", userData.displayName)
      localStorage.setItem("fc_pfp_url", userData.pfpUrl || "")
      if (userData.token) {
        localStorage.setItem("fc_token", userData.token)
      }
      console.log("üíæ Hybrid user data saved:", userData)
    } catch (error) {
      console.error("‚ùå Error saving user data:", error)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  const loadUserDataFromStorage = () => {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç hybridUser –Ω–∞–¥ farcasterUser
      const savedUser = localStorage.getItem("hybridUser") || localStorage.getItem("farcasterUser")
      if (!savedUser) return null

      const userData = JSON.parse(savedUser)
      if (userData.fid && userData.username) {
        console.log("üìÇ Loaded user data from storage:", userData)
        return userData
      }

      return null
    } catch (error) {
      console.error("‚ùå Error loading user data from storage:", error)
      return null
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Neynar
  const fetchUserDataFromNeynar = async (userFid: string) => {
    try {
      console.log(`üîç Fetching user data from Neynar for FID: ${userFid}`)

      const response = await fetch(`/api/neynar/user?fid=${userFid}`)

      if (!response.ok) {
        throw new Error(`Failed to fetch user data: ${response.status}`)
      }

      const data = await response.json()
      const user = data?.users?.[0]

      if (user) {
        const userData = {
          fid: user.fid.toString(),
          username: user.username,
          displayName: user.display_name || user.username,
          pfpUrl: user.pfp_url || null,
          bio: user.bio || null,
          followerCount: user.follower_count || 0,
          followingCount: user.following_count || 0,
        }

        console.log("‚úÖ Successfully fetched user data from Neynar:", userData)
        return userData
      } else {
        throw new Error("No user data found in Neynar response")
      }
    } catch (error: any) {
      console.error("‚ùå Error fetching user data from Neynar:", error)

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π FID
      return {
        fid: userFid,
        username: `user_${userFid}`,
        displayName: `User ${userFid}`,
        pfpUrl: `https://api.dicebear.com/7.x/avataaars/svg?seed=${userFid}`,
        bio: `User with FID ${userFid}`,
        followerCount: 0,
        followingCount: 0,
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const refreshUserData = async () => {
    if (!fid || isRefreshing) {
      console.warn("Cannot refresh user data: no FID available or already refreshing")
      return
    }

    setIsRefreshing(true)
    try {
      console.log(`üîÑ Refreshing user data for FID: ${fid}`)
      const userData = await fetchUserDataFromNeynar(fid)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setUsername(userData.username)
      setDisplayName(userData.displayName)
      setPfpUrl(userData.pfpUrl)
      setBio(userData.bio)
      setFollowerCount(userData.followerCount)
      setFollowingCount(userData.followingCount)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      saveUserData({
        ...userData,
        token,
      })

      console.log("üíæ User data refreshed from Neynar:", userData)
    } catch (err: any) {
      console.error("Failed to refresh user data:", err)
      setError("Failed to refresh user data: " + err.message)
    } finally {
      setIsRefreshing(false)
    }
  }

  useEffect(() => {
    async function initAuth() {
      try {
        setIsLoading(true)
        setError(null)

        console.log("üöÄ Starting hybrid auth process (Farcaster SDK + Neynar)...")

        if (typeof window === "undefined") {
          throw new Error("Not in browser environment")
        }

        // Force clear –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä
        if (window.location.search.includes("forceClear=true")) {
          console.log("üßπ Force clear triggered")
          localStorage.removeItem("hybridUser")
          localStorage.removeItem("farcasterUser")
          localStorage.removeItem("fc_token")
          localStorage.removeItem("fc_fid")
          localStorage.removeItem("fc_username")
          localStorage.removeItem("fc_display_name")
          localStorage.removeItem("fc_pfp_url")
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const savedUserData = loadUserDataFromStorage()
        if (savedUserData && !window.location.search.includes("forceClear=true")) {
          console.log("‚úÖ Found valid saved user data:", savedUserData)

          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏
          const isTemporaryData =
            savedUserData.username?.startsWith("user_") ||
            savedUserData.username?.startsWith("demo_") ||
            savedUserData.displayName?.startsWith("User ")

          if (isTemporaryData) {
            console.log("‚ö†Ô∏è Found temporary user data, will refresh from Neynar")

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            setToken(savedUserData.token || null)
            setFid(savedUserData.fid)
            setUsername(savedUserData.username)
            setDisplayName(savedUserData.displayName)
            setPfpUrl(savedUserData.pfpUrl)
            setBio(savedUserData.bio)
            setFollowerCount(savedUserData.followerCount || 0)
            setFollowingCount(savedUserData.followingCount || 0)
            setIsAuthenticated(true)

            // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Neynar
            try {
              const realUserData = await fetchUserDataFromNeynar(savedUserData.fid)

              // –û–±–Ω–æ–≤–ª—è–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
              setUsername(realUserData.username)
              setDisplayName(realUserData.displayName)
              setPfpUrl(realUserData.pfpUrl)
              setBio(realUserData.bio)
              setFollowerCount(realUserData.followerCount)
              setFollowingCount(realUserData.followingCount)

              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              saveUserData({
                ...realUserData,
                token: savedUserData.token,
              })

              console.log("‚úÖ Updated temporary data with real Neynar data:", realUserData)
            } catch (neynarError) {
              console.warn("‚ö†Ô∏è Failed to update with Neynar data, keeping temporary data")
            }
          } else {
            // –î–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç —Ä–µ–∞–ª—å–Ω—ã–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            setToken(savedUserData.token || null)
            setFid(savedUserData.fid)
            setUsername(savedUserData.username)
            setDisplayName(savedUserData.displayName)
            setPfpUrl(savedUserData.pfpUrl)
            setBio(savedUserData.bio)
            setFollowerCount(savedUserData.followerCount || 0)
            setFollowingCount(savedUserData.followingCount || 0)
            setIsAuthenticated(true)
          }

          setIsLoading(false)
          return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω ÔøΩÔøΩ–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        const isDevelopment = process.env.NODE_ENV === "development"

        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ FID
        if (isDevelopment && !window.location.search.includes("fid=")) {
          console.log("üß™ Development mode detected, creating demo user")
          const demoUser = createDemoUser()

          setToken(demoUser.token)
          setFid(demoUser.fid)
          setUsername(demoUser.username)
          setDisplayName(demoUser.displayName)
          setPfpUrl(demoUser.pfpUrl)
          setBio(demoUser.bio)
          setFollowerCount(demoUser.followerCount)
          setFollowingCount(demoUser.followingCount)
          setIsAuthenticated(true)

          saveUserData(demoUser)

          setIsLoading(false)
          return
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Farcaster SDK –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        try {
          console.log("üîç Trying to use Farcaster SDK for QuickAuth...")

          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç SDK
          const { sdk } = await import("@farcaster/frame-sdk")

          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SDK
          await sdk.actions.ready()
          console.log("‚úÖ Farcaster SDK initialized")

          // –í—ã–∑—ã–≤–∞–µ–º QuickAuth
          const signInResult = await sdk.experimental.quickAuth()
          console.log("‚úÖ QuickAuth completed:", signInResult)

          if (!signInResult || !signInResult.token) {
            throw new Error("No token returned from QuickAuth")
          }

          const loginToken = signInResult.token

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–≤–æ–π API-—Ä–æ—É—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è FID
          const res = await fetch("/api/auth/verify", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ token: `Bearer ${loginToken}` }),
          })

          if (!res.ok) {
            throw new Error("JWT verification failed")
          }

          const verificationResult = await res.json()
          const userFid = verificationResult.fid

          console.log(`‚úÖ Got FID from verification: ${userFid}`)

          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Neynar
          console.log("üîç Fetching real user data from Neynar...")
          const neynarUserData = await fetchUserDataFromNeynar(userFid)

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          setToken(loginToken)
          setFid(neynarUserData.fid)
          setUsername(neynarUserData.username)
          setDisplayName(neynarUserData.displayName)
          setPfpUrl(neynarUserData.pfpUrl)
          setBio(neynarUserData.bio)
          setFollowerCount(neynarUserData.followerCount)
          setFollowingCount(neynarUserData.followingCount)
          setIsAuthenticated(true)

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
          saveUserData({
            ...neynarUserData,
            token: loginToken,
          })

          console.log("‚úÖ Hybrid auth successful with real Neynar data:", neynarUserData)
        } catch (sdkError: any) {
          console.error("‚ùå SDK or QuickAuth error:", sdkError)

          // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ SDK
          console.log("üß™ Creating demo user due to SDK error")
          const demoUser = createDemoUser()

          setToken(demoUser.token)
          setFid(demoUser.fid)
          setUsername(demoUser.username)
          setDisplayName(demoUser.displayName)
          setPfpUrl(demoUser.pfpUrl)
          setBio(demoUser.bio)
          setFollowerCount(demoUser.followerCount)
          setFollowingCount(demoUser.followingCount)
          setIsAuthenticated(true)

          saveUserData(demoUser)
        }
      } catch (e: any) {
        console.error("‚ùå Auth error:", e)
        setError(e.message || String(e))

        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        const demoUser = createDemoUser()
        setToken(demoUser.token)
        setFid(demoUser.fid)
        setUsername(demoUser.username)
        setDisplayName(demoUser.displayName)
        setPfpUrl(demoUser.pfpUrl)
        setBio(demoUser.bio)
        setFollowerCount(demoUser.followerCount)
        setFollowingCount(demoUser.followingCount)
        setIsAuthenticated(true)

        saveUserData(demoUser)
      } finally {
        setIsLoading(false)
      }
    }

    initAuth()
  }, [])

  return {
    token,
    fid,
    username,
    displayName,
    pfpUrl,
    bio,
    followerCount,
    followingCount,
    isLoading,
    error,
    isAuthenticated,
    refreshUserData,
    isRefreshing,
  }
}
