"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Sparkles, Coins } from "lucide-react"
import { useBalance } from "@/contexts/balance-context"

// –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤ —Å –∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏
const slotItems = [
  { symbol: "üêñ", multiplier: 50, name: "Pig" }, // Pig - —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª
  { symbol: "üê∏", multiplier: 20, name: "Frog" }, // Frog
  { symbol: "ü¶ç", multiplier: 10, name: "Ape" }, // Ape
  { symbol: "üëΩ", multiplier: 8, name: "Alien" }, // Alien
  { symbol: "üêç", multiplier: 6, name: "Snake" }, // Snake
  { symbol: "ü¶ñ", multiplier: 4, name: "Dino" }, // Dino
  { symbol: "üêã", multiplier: 2, name: "Whale" }, // Whale
]

interface SlotsGameProps {
  updateBalance?: (amount: number) => Promise<void>
  balance?: number
}

export default function SlotsGame({ updateBalance: legacyUpdateBalance, balance: legacyBalance }: SlotsGameProps) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π BalanceContext
  const { balance, subtractFromBalance, addToBalance, isLoading: balanceLoading } = useBalance()

  const [reels, setReels] = useState<string[]>(["‚ùì", "‚ùì", "‚ùì"])
  const [spinning, setSpinning] = useState(false)
  const [bet, setBet] = useState(10)
  const [lastWin, setLastWin] = useState(0)
  const [spinResult, setSpinResult] = useState<"win" | "lose" | null>(null)
  const [spinHistory, setSpinHistory] = useState<Array<{ result: "win" | "lose"; amount: number }>>([])
  const [animationPhase, setAnimationPhase] = useState<"idle" | "spinning" | "stopping" | "result">("idle")

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
  const getRandomSymbol = () => {
    // –í–µ—Å–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ (—á–µ–º –±–æ–ª—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º —á–∞—â–µ –≤—ã–ø–∞–¥–∞–µ—Ç)
    const weights = [1, 3, 6, 10, 15, 25, 40] // Pig —Å–∞–º—ã–π —Ä–µ–¥–∫–∏–π, Whale —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π
    const totalWeight = weights.reduce((a, b) => a + b, 0)

    const random = Math.random() * totalWeight
    let weightSum = 0

    for (let i = weights.length - 1; i >= 0; i--) {
      // –ò–¥–µ–º —Å –∫–æ–Ω—Ü–∞ (–æ—Ç —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –∫ —Ä–µ–¥–∫–∏–º)
      weightSum += weights[i]
      if (random <= weightSum) {
        return slotItems[i].symbol
      }
    }

    return slotItems[slotItems.length - 1].symbol
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
  const spin = async () => {
    if (spinning || balanceLoading) {
      console.warn("‚ö†Ô∏è Cannot spin: already spinning or balance loading")
      return
    }

    const currentBalance = balance || 0
    if (currentBalance < bet) {
      console.warn("‚ö†Ô∏è Cannot spin: insufficient balance")
      return
    }

    console.log(`üé∞ Starting spin with bet: ${bet}, current balance: ${currentBalance}`)

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ BalanceContext
    const success = await subtractFromBalance(bet)
    if (!success) {
      console.warn("‚ö†Ô∏è Failed to place bet")
      return
    }

    setSpinning(true)
    setSpinResult(null)
    setLastWin(0)
    setAnimationPhase("spinning")

    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    let spinCount = 0
    const maxSpins = 30 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    const baseInterval = 50 // –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

    const spinInterval = setInterval(
      () => {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setReels([getRandomSymbol(), getRandomSymbol(), getRandomSymbol()])
        spinCount++

        // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–º–µ–¥–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if (spinCount > maxSpins * 0.7) {
          setAnimationPhase("stopping")
        }

        if (spinCount >= maxSpins) {
          clearInterval(spinInterval)

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
          const finalReels = generateFinalReels()
          setReels(finalReels)
          setAnimationPhase("result")

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
          setTimeout(() => {
            checkWin(finalReels)
            setSpinning(false)
            setAnimationPhase("idle")
          }, 500)
        }
      },
      baseInterval + Math.floor(spinCount / 3),
    ) // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
  const generateFinalReels = (): string[] => {
    const finalReels = [getRandomSymbol(), getRandomSymbol(), getRandomSymbol()]

    // –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É –≤—ã–∏–≥—Ä—ã—à–µ–π
    const winChance = Math.random()

    // 15% —à–∞–Ω—Å –Ω–∞ –¥–∂–µ–∫–ø–æ—Ç (3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö)
    if (winChance < 0.15) {
      const symbol = getRandomSymbol()
      return [symbol, symbol, symbol]
    }

    // 25% —à–∞–Ω—Å –Ω–∞ —á–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à (2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö)
    if (winChance < 0.4) {
      const symbol = getRandomSymbol()
      const position = Math.floor(Math.random() * 3)
      finalReels[position] = symbol
      finalReels[(position + 1) % 3] = symbol
    }

    // 60% —à–∞–Ω—Å –Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–Ω—ã–µ
    if (winChance >= 0.4) {
      // –î–µ–ª–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–Ω—ã–º–∏
      while (finalReels[0] === finalReels[1] || finalReels[1] === finalReels[2] || finalReels[0] === finalReels[2]) {
        finalReels[Math.floor(Math.random() * 3)] = getRandomSymbol()
      }
    }

    return finalReels
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
  const checkWin = async (currentReels: string[]) => {
    console.log("üé∞ Checking win for reels:", currentReels)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (–¥–∂–µ–∫–ø–æ—Ç)
    if (currentReels[0] === currentReels[1] && currentReels[1] === currentReels[2]) {
      const symbol = currentReels[0]
      const item = slotItems.find((item) => item.symbol === symbol)

      if (item) {
        const winAmount = bet * item.multiplier
        console.log(`üéâ JACKPOT! ${item.name} x3 - Won ${winAmount} OINK`)

        await addToBalance(winAmount)
        setLastWin(winAmount)
        setSpinResult("win")
        setSpinHistory((prev) => [...prev, { result: "win", amount: winAmount }].slice(-10))

        // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
        if (winAmount >= bet * 10) {
          console.log("üéä BIG WIN!")
        }
      }
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞
    else if (
      currentReels[0] === currentReels[1] ||
      currentReels[1] === currentReels[2] ||
      currentReels[0] === currentReels[2]
    ) {
      let symbol: string
      if (currentReels[0] === currentReels[1]) symbol = currentReels[0]
      else if (currentReels[1] === currentReels[2]) symbol = currentReels[1]
      else symbol = currentReels[0]

      const item = slotItems.find((item) => item.symbol === symbol)

      if (item) {
        // –ß–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à - –º–µ–Ω—å—à–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        const winAmount = Math.max(1, Math.floor(bet * (item.multiplier / 4)))
        console.log(`üéâ Partial win! ${item.name} x2 - Won ${winAmount} OINK`)

        await addToBalance(winAmount)
        setLastWin(winAmount)
        setSpinResult("win")
        setSpinHistory((prev) => [...prev, { result: "win", amount: winAmount }].slice(-10))
      }
    } else {
      console.log("üí∏ No win this time")
      setLastWin(0)
      setSpinResult("lose")
      setSpinHistory((prev) => [...prev, { result: "lose", amount: 0 }].slice(-10))
    }
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
  const changeBet = (amount: number) => {
    if (spinning) return

    const newBet = bet + amount
    if (newBet >= 10 && newBet <= 100) {
      setBet(newBet)
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    setReels([getRandomSymbol(), getRandomSymbol(), getRandomSymbol()])
  }, [])

  const currentBalance = balance || 0

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between mb-2">
        <h3 className="text-lg font-bold text-[#fd0c96]">Oink & Spin</h3>
        <div className="flex items-center gap-2">
          <Coins className="h-4 w-4 text-[#fd0c96]" />
          <span className="text-sm text-white">
            Balance: <span className="font-bold text-[#fd0c96]">{currentBalance} OINK</span>
          </span>
        </div>
      </div>

      {/* –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ */}
      <Card className="bg-black border-[#fd0c96]/30 w-full max-w-md mx-auto">
        <CardContent className="p-4 min-h-[380px] flex flex-col">
          <div className="flex justify-center gap-2 mb-4">
            {reels.map((symbol, index) => (
              <div
                key={index}
                className={`w-16 h-16 flex items-center justify-center text-3xl bg-gradient-to-b from-[#fd0c96]/20 to-[#fd0c96]/5 rounded-lg border border-[#fd0c96]/30 transition-all duration-100 ${
                  animationPhase === "spinning"
                    ? "animate-pulse scale-105"
                    : animationPhase === "stopping"
                      ? "animate-bounce"
                      : animationPhase === "result" && spinResult === "win"
                        ? "ring-2 ring-green-500 ring-opacity-75 animate-pulse"
                        : ""
                }`}
              >
                {symbol}
              </div>
            ))}
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
          <div className="text-center mb-4 h-8 flex items-center justify-center">
            {spinResult && animationPhase === "idle" && (
              <div
                className={`transition-all duration-500 ${spinResult === "win" ? "text-green-500" : "text-red-500"}`}
              >
                {spinResult === "win" ? (
                  <div className="flex items-center justify-center gap-1">
                    <Sparkles className="h-4 w-4 animate-spin" />
                    <span className="font-bold">
                      {lastWin >= bet * 10 ? "BIG WIN: " : "Win: "}
                      {lastWin} OINK!
                    </span>
                    <Sparkles className="h-4 w-4 animate-spin" />
                  </div>
                ) : (
                  <span>Try again!</span>
                )}
              </div>
            )}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–≤–∫–µ */}
          <div className="text-center mb-4">
            <div className="text-sm text-white mb-2">
              Bet: <span className="font-bold text-[#fd0c96]">{bet} OINK</span>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex justify-center gap-2 mb-4">
            <Button
              variant="outline"
              size="sm"
              onClick={() => changeBet(-10)}
              disabled={bet <= 10 || spinning}
              className="border-[#fd0c96]/30 text-[#fd0c96] hover:bg-[#fd0c96]/10"
            >
              -10
            </Button>
            <Button
              className={`min-w-[120px] transition-all duration-200 ${
                spinning
                  ? "bg-gray-600 cursor-not-allowed"
                  : currentBalance >= bet
                    ? "bg-[#fd0c96] hover:bg-[#fd0c96]/80 hover:scale-105"
                    : "bg-gray-600 cursor-not-allowed"
              }`}
              disabled={spinning || currentBalance < bet || balanceLoading}
              onClick={spin}
            >
              {spinning ? (
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Spinning...
                </div>
              ) : currentBalance < bet ? (
                "Insufficient Balance"
              ) : (
                "SPIN!"
              )}
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => changeBet(10)}
              disabled={bet >= 100 || spinning}
              className="border-[#fd0c96]/30 text-[#fd0c96] hover:bg-[#fd0c96]/10"
            >
              +10
            </Button>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–∞—Ö */}
          <div className="grid grid-cols-2 gap-2 text-xs min-h-[100px]">
            <div className="bg-[#fd0c96]/10 p-3 rounded min-h-[90px] flex flex-col">
              <div className="font-bold mb-2 text-white whitespace-nowrap">Winning</div>
              <div className="font-bold mb-2 text-white whitespace-nowrap"> combinations:</div>
              <div className="space-y-1 text-gray-300 flex-1">
                <div className="whitespace-nowrap">3 identical: x2-x50</div>
                <div className="whitespace-nowrap">2 identical: x0.5-x12.5</div>
              </div>
            </div>
            <div className="bg-[#fd0c96]/10 p-3 rounded min-h-[90px] flex flex-col">
              <div className="font-bold mb-2 text-white whitespace-nowrap">Best symbols:</div>
              <div className="space-y-1 text-gray-300 flex-1">
                <div className="whitespace-nowrap">üêñ - x50 (Pig)</div>
                <div className="whitespace-nowrap">üê∏ - x20 (Frog)</div>
                <div className="whitespace-nowrap">ü¶ç - x10 (Ape)</div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ò—Å—Ç–æ—Ä–∏—è —Å–ø–∏–Ω–æ–≤ */}
      {spinHistory.length > 0 && (
        <div className="mt-4">
          <h4 className="text-sm font-medium mb-2 text-white">Recent spins:</h4>
          <div className="flex flex-wrap gap-1">
            {spinHistory.map((spin, index) => (
              <div
                key={index}
                className={`w-6 h-6 rounded-full flex items-center justify-center text-xs transition-all duration-200 ${
                  spin.result === "win"
                    ? "bg-green-500/20 text-green-500 border border-green-500/30"
                    : "bg-red-500/20 text-red-500 border border-red-500/30"
                }`}
                title={spin.result === "win" ? `Won ${spin.amount} OINK` : "No win"}
              >
                {spin.result === "win" ? "W" : "L"}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}
