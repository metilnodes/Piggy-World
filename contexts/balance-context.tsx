"use client"

import type React from "react"
import { createContext, useContext, useState, useCallback, useEffect } from "react"

interface BalanceContextType {
  balance: number | null
  isLoading: boolean
  error: string | null
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ÔøΩÔøΩ–∞–ª–∞–Ω—Å–∞
  fetchBalance: () => Promise<void>
  updateBalance: (newValue: number) => Promise<void>
  addToBalance: (amount: number) => Promise<void>
  subtractFromBalance: (amount: number) => Promise<boolean>
  refreshBalance: () => Promise<void>
}

const BalanceContext = createContext<BalanceContextType | undefined>(undefined)

export function BalanceProvider({ children }: { children: React.ReactNode }) {
  const [balance, setBalance] = useState<number | null>(null)
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [error, setError] = useState<string | null>(null)

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getCurrentUser = () => {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç hybridUser –Ω–∞–¥ farcasterUser
      const savedUser = localStorage.getItem("hybridUser") || localStorage.getItem("farcasterUser")
      if (savedUser) {
        const user = JSON.parse(savedUser)
        if (user.fid && user.username) {
          console.log("üë§ BalanceContext using user:", user.username, "FID:", user.fid)
          return user
        }
      }
    } catch (error) {
      console.error("Error getting current user:", error)
    }

    // Fallback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const fallbackUser = {
      fid: "guest_" + Math.floor(Math.random() * 10000),
      username: "guest" + Math.floor(Math.random() * 1000),
    }
    console.log("‚ö†Ô∏è BalanceContext using fallback user:", fallbackUser)
    return fallbackUser
  }

  // 1) –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ Neon (GET /api/balance)
  const fetchBalance = useCallback(async () => {
    const user = getCurrentUser()
    if (!user?.fid) {
      console.warn("No user found for balance fetch")
      setError("No user data available")
      return
    }

    try {
      setIsLoading(true)
      setError(null)

      console.log(`üîç BalanceContext: fetching balance for fid=${user.fid} (${user.username})`)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º GET –∑–∞–ø—Ä–æ—Å —Å fid –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
      const res = await fetch(`/api/balance?fid=${user.fid}&_t=${Date.now()}`, {
        method: "GET",
        cache: "no-store",
        headers: {
          "Cache-Control": "no-cache",
          Pragma: "no-cache",
        },
      })

      if (!res.ok) {
        throw new Error(`Failed to fetch balance: ${res.status}`)
      }

      const data = await res.json()
      console.log("‚úÖ BalanceContext: Balance fetched from DB:", data.balance, "for user:", user.username)

      setBalance(data.balance)
      localStorage.setItem("oinkBalance", data.balance.toString())
    } catch (e: any) {
      console.error("‚ùå BalanceContext fetchBalance error:", e)
      setError(e.message || "Failed to fetch balance")
    } finally {
      setIsLoading(false)
    }
  }, [])

  // 2) –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (POST /api/balance)
  const updateBalance = useCallback(
    async (newValue: number) => {
      const user = getCurrentUser()
      if (!user?.fid) {
        console.warn("No user found for balance update")
        setError("No user data available")
        return
      }

      try {
        setIsLoading(true)
        setError(null)

        console.log(`üîÑ BalanceContext: updating balance to ${newValue} for fid=${user.fid} (${user.username})`)

        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        setBalance(newValue)
        localStorage.setItem("oinkBalance", newValue.toString())

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const res = await fetch("/api/balance", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            fid: user.fid,
            username: user.username,
            newBalance: newValue,
            reason: "direct_update",
          }),
        })

        if (!res.ok) {
          const err = await res.json()
          throw new Error(err.error || "Failed to update balance")
        }

        const data = await res.json()
        console.log("‚úÖ BalanceContext: Balance updated in DB:", data.balance, "for user:", user.username)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ –ë–î
        setBalance(data.balance)
        localStorage.setItem("oinkBalance", data.balance.toString())
      } catch (e: any) {
        console.error("‚ùå BalanceContext updateBalance error:", e)
        setError(e.message || "Failed to update balance")

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        await fetchBalance()
      } finally {
        setIsLoading(false)
      }
    },
    [fetchBalance],
  )

  // 3) –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –±–∞–ª–∞–Ω—Å—É
  const addToBalance = useCallback(
    async (amount: number) => {
      const user = getCurrentUser()
      if (!user?.fid || amount <= 0) return

      try {
        setIsLoading(true)
        setError(null)

        console.log(`‚ûï BalanceContext: adding ${amount} to balance for fid=${user.fid} (${user.username})`)

        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const newBalance = (balance || 0) + amount
        setBalance(newBalance)
        localStorage.setItem("oinkBalance", newBalance.toString())

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST —Å balanceChange
        const res = await fetch("/api/balance", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            fid: user.fid,
            username: user.username,
            balanceChange: amount,
            reason: "add_coins",
          }),
        })

        if (!res.ok) {
          const err = await res.json()
          throw new Error(err.error || "Failed to add to balance")
        }

        const data = await res.json()
        console.log(
          `‚úÖ BalanceContext: Added ${amount} to balance, new total:`,
          data.balance,
          "for user:",
          user.username,
        )

        setBalance(data.balance)
        localStorage.setItem("oinkBalance", data.balance.toString())
      } catch (e: any) {
        console.error("‚ùå BalanceContext addToBalance error:", e)
        setError(e.message || "Failed to add to balance")
        await fetchBalance() // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      } finally {
        setIsLoading(false)
      }
    },
    [balance, fetchBalance],
  )

  // 4) –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è –∏–∑ –±–∞–ª–∞–Ω—Å–∞
  const subtractFromBalance = useCallback(
    async (amount: number): Promise<boolean> => {
      const user = getCurrentUser()
      if (!user?.fid || amount <= 0) return false

      const currentBalance = balance || 0
      if (currentBalance < amount) {
        console.warn(
          `‚ùå BalanceContext: Insufficient balance: ${currentBalance} < ${amount} for user: ${user.username}`,
        )
        return false
      }

      try {
        setIsLoading(true)
        setError(null)

        console.log(`‚ûñ BalanceContext: subtracting ${amount} from balance for fid=${user.fid} (${user.username})`)

        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const newBalance = currentBalance - amount
        setBalance(newBalance)
        localStorage.setItem("oinkBalance", newBalance.toString())

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º POST —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º balanceChange
        const res = await fetch("/api/balance", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            fid: user.fid,
            username: user.username,
            balanceChange: -amount,
            reason: "subtract_coins",
          }),
        })

        if (!res.ok) {
          const err = await res.json()
          throw new Error(err.error || "Failed to subtract from balance")
        }

        const data = await res.json()
        console.log(
          `‚úÖ BalanceContext: Subtracted ${amount} from balance, new total:`,
          data.balance,
          "for user:",
          user.username,
        )

        setBalance(data.balance)
        localStorage.setItem("oinkBalance", data.balance.toString())

        return true
      } catch (e: any) {
        console.error("‚ùå BalanceContext subtractFromBalance error:", e)
        setError(e.message || "Failed to subtract from balance")
        await fetchBalance() // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        return false
      } finally {
        setIsLoading(false)
      }
    },
    [balance, fetchBalance],
  )

  // 5) –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const refreshBalance = useCallback(async () => {
    console.log("üîÑ BalanceContext: Refreshing balance...")
    await fetchBalance()
  }, [fetchBalance])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const user = getCurrentUser()
    if (user?.fid) {
      console.log("üöÄ BalanceContext: Initializing for user:", user.username, "FID:", user.fid)

      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const savedBalance = localStorage.getItem("oinkBalance")
      if (savedBalance) {
        setBalance(Number(savedBalance))
      }

      // –ó–∞—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î
      fetchBalance()
    } else {
      console.error("‚ùå BalanceContext: No valid user found")
      setError("No user data available")
    }
  }, [fetchBalance])

  // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞
  useEffect(() => {
    const handleBalanceUpdate = (event: CustomEvent) => {
      const { balance: newBalance } = event.detail
      console.log("üîÑ BalanceContext: Global balance update received:", newBalance)
      setBalance(newBalance)
      localStorage.setItem("oinkBalance", newBalance.toString())
    }

    window.addEventListener("balanceUpdated", handleBalanceUpdate as EventListener)
    return () => {
      window.removeEventListener("balanceUpdated", handleBalanceUpdate as EventListener)
    }
  }, [])

  return (
    <BalanceContext.Provider
      value={{
        balance,
        isLoading,
        error,
        fetchBalance,
        updateBalance,
        addToBalance,
        subtractFromBalance,
        refreshBalance,
      }}
    >
      {children}
    </BalanceContext.Provider>
  )
}

// –•—É–∫-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
export function useBalance() {
  const ctx = useContext(BalanceContext)
  if (!ctx) {
    throw new Error("useBalance must be used within BalanceProvider")
  }
  return ctx
}
