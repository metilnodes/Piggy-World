"use client"

import { AppProvider } from "@/contexts/app-context"
import { WorldMap } from "@/components/world-map"
import { useSimpleAuth } from "@/hooks/useSimpleAuth"
import { useState, useEffect } from "react"
import { AuthStatus } from "@/components/auth-status"

// –ò–º–ø–æ—Ä—Ç—ã –¥–µ–±–∞–≥–µ—Ä–æ–≤ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
import { SimpleAuthDebug } from "@/components/simple-auth-debug"
import { NeynarDebug } from "@/components/neynar-debug"
import { TipsDebugger } from "@/components/tips-debugger"

function AuthenticatedApp() {
  const auth = useSimpleAuth()
  const [mounted, setMounted] = useState(false)
  const [appEntered, setAppEntered] = useState(false)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  const isDevMode = process.env.NEXT_PUBLIC_DEV_MODE === "true"

  useEffect(() => {
    setMounted(true)
  }, [])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ addMiniApp –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –≤ Farcaster
  useEffect(() => {
    if (!mounted) return

    const handleAddMiniApp = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–æ–º–ø—Ç
        const alreadyPrompted = localStorage.getItem("miniAppPrompted")
        console.log("üîç AddMiniApp already prompted:", alreadyPrompted)

        if (alreadyPrompted === "true") {
          console.log("‚ÑπÔ∏è AddMiniApp already prompted, skipping")
          return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Farcaster
        if (typeof window !== "undefined" && window.parent !== window) {
          // –ú—ã –≤ iframe, –ø—Ä–æ–≤–µ—Ä—è–µ–º Farcaster SDK
          const sdk = (window as any).parent?.window?.farcasterSdk || (window as any).farcasterSdk

          if (sdk && sdk.actions && typeof sdk.actions.addMiniApp === "function") {
            console.log("‚úÖ Farcaster SDK found, calling addMiniApp")

            try {
              await sdk.actions.addMiniApp()
              localStorage.setItem("miniAppPrompted", "true")
              console.log("‚úÖ AddMiniApp successfully called")
            } catch (addError) {
              console.error("‚ùå Error calling addMiniApp:", addError)
              // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
              localStorage.setItem("miniAppPrompted", "true")
            }
          } else {
            console.log("‚ÑπÔ∏è Farcaster SDK not available")

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ postMessage
            try {
              window.parent.postMessage(
                {
                  type: "fc:frame:add_mini_app",
                  data: {},
                },
                "*",
              )
              localStorage.setItem("miniAppPrompted", "true")
              console.log("‚úÖ AddMiniApp called via postMessage")
            } catch (postError) {
              console.error("‚ùå Error with postMessage:", postError)
            }
          }
        } else {
          console.log("‚ÑπÔ∏è Not in Farcaster iframe, skipping addMiniApp")
        }
      } catch (error) {
        console.error("‚ùå Error in handleAddMiniApp:", error)
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const timer = setTimeout(handleAddMiniApp, 2000)
    return () => clearTimeout(timer)
  }, [mounted])

  // –ì–æ—Å—Ç–µ–≤–æ–π —Ç–∞–π–º–∞—É—Ç - –µ—Å–ª–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫ auth –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –¥–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø
  useEffect(() => {
    if (!mounted) return

    const timer = setTimeout(() => {
      if (!auth.isAuthenticated && !auth.error) {
        console.log("üïê Guest timeout - allowing guest access")
        setAppEntered(true)
      }
    }, 10000) // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 10 —Å–µ–∫—É–Ω–¥

    return () => clearTimeout(timer)
  }, [mounted, auth.isAuthenticated, auth.error])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Frame SDK –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (!mounted) return

    const initializeFrames = async () => {
      try {
        const { initFrames, isInWarpcast } = await import("@/app/frames/index")
        const isInFrame = isInWarpcast()
        console.log("üñºÔ∏è Frame context:", { isInFrame })

        if (isInFrame) {
          await initFrames()
        }
      } catch (error) {
        console.error("Frame initialization error:", error)
      }
    }

    initializeFrames()
  }, [mounted])

  const handleRetry = () => {
    console.log("üîÑ Retrying authentication...")
    window.location.reload()
  }

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏—á–µ–≥–æ –¥–æ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (!mounted) {
    return null
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏—Å—Ç–µ–∫ —Ç–∞–π–º–∞—É—Ç
  if (auth.isLoading && !appEntered) {
    return (
      <main
        className="relative w-full h-full overflow-hidden"
        style={{
          backgroundImage: "url('/background.png')",
          backgroundSize: "cover",
          backgroundPosition: "center",
          backgroundRepeat: "no-repeat",
        }}
      >
        <div className="absolute inset-0 backdrop-blur-md bg-black bg-opacity-50 z-0" />
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center z-10">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#fd0c96] mx-auto mb-4"></div>
          <h2 className="text-xl font-bold text-[#fd0c96] mb-2">Loading...</h2>
          <p className="text-sm text-gray-300">Connecting to Farcaster...</p>
          <p className="text-xs text-gray-400 mt-2">Getting your profile data</p>
        </div>
      </main>
    )
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ò–õ–ò —Ä–∞–∑—Ä–µ—à–µ–Ω –≥–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø
  if (auth.isAuthenticated || appEntered) {
    return (
      <main
        className="relative w-full h-full overflow-hidden"
        style={{
          backgroundImage: "url('/background.png')",
          backgroundSize: "cover",
          backgroundPosition: "center",
          backgroundRepeat: "no-repeat",
        }}
      >
        <div className="relative w-full h-full">
          <WorldMap />
        </div>

        {/* –í—Å–µ –¥–µ–±–∞–≥–µ—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
        {isDevMode && (
          <>
            <AuthStatus />
            <SimpleAuthDebug />
            <NeynarDebug />
            <TipsDebugger />
          </>
        )}
      </main>
    )
  }

  // –≠–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
  return (
    <main
      className="relative w-full h-full overflow-hidden"
      style={{
        backgroundImage: "url('/background.png')",
        backgroundSize: "cover",
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
      }}
    >
      <div className="absolute inset-0 backdrop-blur-md bg-black bg-opacity-30 z-0" />
      <div
        className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 max-w-[360px] w-full bg-black bg-opacity-70 p-6 rounded-lg shadow-lg backdrop-blur-sm transition-all duration-500 z-10"
        style={{ border: "1px solid #fd0c96" }}
      >
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4" style={{ color: "#fd0c96" }}>
            Piggy World
          </h1>
          <p className="text-sm mb-4" style={{ color: "#fd0c96" }}>
            Interactive Piggy ecosystem
          </p>

          {auth.error ? (
            <div className="mb-4 p-3 bg-red-500/20 border border-red-500/50 rounded-lg">
              <p className="text-red-400 text-sm font-medium">Authentication Error</p>
              <p className="text-red-300 text-xs mt-1">{auth.error}</p>
            </div>
          ) : (
            <div className="mb-4 p-3 bg-blue-500/20 border border-blue-500/50 rounded-lg">
              <p className="text-blue-400 text-sm">Waiting for Farcaster authentication...</p>
            </div>
          )}

          <div className="space-y-2">
            <button onClick={handleRetry} className="neon-button w-full">
              Try Again
            </button>
            <button onClick={() => setAppEntered(true)} className="neon-button w-full opacity-75">
              Continue as Guest
            </button>
          </div>
        </div>
      </div>
    </main>
  )
}

export default function Home() {
  return (
    <AppProvider>
      <AuthenticatedApp />
    </AppProvider>
  )
}
