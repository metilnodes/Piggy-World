export async function initFrames() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (typeof window === "undefined") return false

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç SDK –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ SSR
    const { sdk } = await import("@farcaster/miniapp-sdk")

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Frame SDK —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤
    await sdk.actions.ready({ disableNativeGestures: true })

    // –î–µ–ª–∞–µ–º SDK –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    ;(window as any).sdk = sdk

    console.log("Frame SDK initialized successfully and made globally available")
    return true
  } catch (error) {
    console.error("Error initializing Frame SDK:", error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Warpcast/Farcaster
export function isInWarpcast(): boolean {
  try {
    if (typeof window === "undefined") return false

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞-—Ç–µ–≥ fc:frame
    const hasFrameMetaTag = !!document.querySelector('meta[name="fc:frame"]')

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const userAgent = navigator.userAgent.toLowerCase()
    const isWarpcastUA = userAgent.includes("warpcast") || userAgent.includes("farcaster")
    const isFramed = window.parent !== window
    const referrerCheck = document.referrer.includes("warpcast") || document.referrer.includes("farcaster")

    return hasFrameMetaTag || isWarpcastUA || isFramed || referrerCheck
  } catch (error) {
    console.error("Error checking if in Warpcast:", error)
    return false
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SDK –∏ –ø—Ä–æ–≤–µ—Ä–∫—É/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ Mini App
export async function initAndMaybeAddMiniApp() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Warpcast
    const isInFrame = isInWarpcast()
    console.log("üñºÔ∏è Frame context:", { isInFrame })

    if (!isInFrame) {
      console.log("‚ÑπÔ∏è Not in Warpcast, skipping SDK initialization")
      return false
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SDK
    const ok = await initFrames()
    if (!ok) {
      console.log("‚ö†Ô∏è Failed to initialize SDK")
      return false
    }

    // –ü–æ–ª—É—á–∞–µ–º SDK –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    const sdk = (window as any).sdk
    if (!sdk || typeof sdk.getContext !== "function") {
      console.log("‚ö†Ô∏è SDK not available or getContext missing")
      return false
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const context = await sdk.getContext()
    console.log("üîç SDK Context:", context)

    if (context?.client?.added === false && context?.client?.type === "warpcast") {
      console.log("‚ÑπÔ∏è Triggering addMiniApp prompt...")
      await sdk.actions.addMiniApp()
      console.log("‚úÖ Prompt shown")
      return true
    } else {
      console.log("‚ÑπÔ∏è App already added or not in Warpcast")
      return false
    }
  } catch (error) {
    console.error("‚ùå Error in initAndMaybeAddMiniApp:", error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è QuickAuth —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
export async function performQuickAuth() {
  try {
    console.log("üöÄ Starting QuickAuth process...")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (typeof window === "undefined") {
      throw new Error("Not in browser environment")
    }

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç SDK
    const { sdk } = await import("@farcaster/miniapp-sdk")

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SDK
    await sdk.actions.ready()

    console.log("‚úÖ SDK ready, starting QuickAuth...")

    // –í—ã–ø–æ–ª–Ω—è–µ–º QuickAuth
    const result = await sdk.experimental.quickAuth()

    if (!result || !result.token) {
      throw new Error("QuickAuth failed: no token received")
    }

    console.log("‚úÖ QuickAuth successful, got token")

    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –Ω–∞—à API
    const response = await fetch("/api/auth/verify", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        token: `Bearer ${result.token}`,
      }),
    })

    if (!response.ok) {
      throw new Error(`Token verification failed: ${response.status}`)
    }

    const verificationData = await response.json()
    console.log("‚úÖ Token verified, FID:", verificationData.fid)

    return {
      token: result.token,
      fid: verificationData.fid,
      success: true,
    }
  } catch (error) {
    console.error("‚ùå QuickAuth error:", error)
    return {
      token: null,
      fid: null,
      success: false,
      error: error instanceof Error ? error.message : String(error),
    }
  }
}
