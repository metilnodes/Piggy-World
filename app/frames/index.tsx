export async function initFrames() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (typeof window === "undefined") return false

    console.log("üñºÔ∏è Initializing frame SDK...")

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ SDK –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ SSR
    const { sdk } = await import("@farcaster/miniapp-sdk")

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Miniapp SDK —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤
    await sdk.actions.ready({
      disableNativeGestures: true,
      timeout: 3000,
    })

    // –î–µ–ª–∞–µ–º SDK –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    ;(window as any).sdk = sdk

    console.log("‚úÖ Miniapp SDK initialized successfully and made globally available")
    return true
  } catch (error) {
    console.error("‚ùå Error initializing Miniapp SDK:", error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Warpcast/Farcaster
export function isInWarpcast(): boolean {
  try {
    if (typeof window === "undefined") return false

    const userAgent = navigator.userAgent.toLowerCase()
    const isWarpcastUA = userAgent.includes("warpcast") || userAgent.includes("farcaster")
    const isFramed = window.parent !== window
    const referrerCheck = document.referrer.includes("warpcast") || document.referrer.includes("farcaster")

    // Check for frame-specific URL parameters
    const urlParams = new URLSearchParams(window.location.search)
    const hasFrameParams = urlParams.has("frame") || urlParams.has("fid")

    // Check for frame-specific headers or meta tags
    const hasFrameMetaTag =
      !!document.querySelector('meta[property="fc:frame"]') || !!document.querySelector('meta[name="fc:frame"]')

    const result = isWarpcastUA || isFramed || referrerCheck || hasFrameParams || hasFrameMetaTag

    console.log("üñºÔ∏è Frame detection:", {
      isWarpcastUA,
      isFramed,
      referrerCheck,
      hasFrameParams,
      hasFrameMetaTag,
      result,
    })

    return result
  } catch (error) {
    console.error("Error checking if in Warpcast:", error)
    return false
  }
}
