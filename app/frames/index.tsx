"use client"

export function isInWarpcast(): boolean {
  if (typeof window === "undefined") return false

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Warpcast
    const userAgent = window.navigator.userAgent.toLowerCase()
    const isWarpcastUA = userAgent.includes("warpcast")
    const isInIframe = window.self !== window.top
    const hasWarpcastContext = !!(window as any).warpcast

    console.log("üîç Environment check:", {
      userAgent: userAgent,
      isWarpcastUA,
      isInIframe,
      hasWarpcastContext,
    })

    return isWarpcastUA || isInIframe || hasWarpcastContext
  } catch (error) {
    console.error("Error checking Warpcast environment:", error)
    return false
  }
}

export async function initFrames(): Promise<void> {
  try {
    console.log("üöÄ Initializing Farcaster SDK...")

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ SDK
    const { sdk } = await import("@farcaster/miniapp-sdk")

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SDK
    await sdk.actions.ready()

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º SDK –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    ;(window as any).sdk = sdk

    console.log("‚úÖ Frame SDK initialized successfully and made globally available")
  } catch (error) {
    console.error("‚ùå Failed to initialize Frame SDK:", error)
    throw error
  }
}

export async function initAndMaybeAddMiniApp(): Promise<void> {
  try {
    console.log("üöÄ Starting Farcaster initialization and Mini App check...")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Warpcast
    const inWarpcast = isInWarpcast()
    console.log("üñºÔ∏è In Warpcast:", inWarpcast)

    if (!inWarpcast) {
      console.log("‚ÑπÔ∏è Not in Warpcast, skipping SDK initialization")
      return
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SDK
    await initFrames()

    // –ü–æ–ª—É—á–∞–µ–º SDK –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    const sdk = (window as any).sdk
    if (!sdk || typeof sdk.getContext !== "function") {
      console.log("‚ö†Ô∏è SDK not available or getContext missing")
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const context = await sdk.getContext()
    console.log("üîç SDK Context:", context)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å prompt –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Mini App
    if (context?.client?.added === false && context?.client?.type === "warpcast") {
      console.log("‚ÑπÔ∏è Triggering addMiniApp prompt...")
      await sdk.actions.addMiniApp()
      console.log("‚úÖ AddMiniApp prompt shown")
    } else {
      console.log("‚ÑπÔ∏è Mini App already added or not in Warpcast client")
    }
  } catch (error) {
    console.error("‚ùå Error in initAndMaybeAddMiniApp:", error)
  }
}
