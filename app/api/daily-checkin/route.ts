export const runtime = "nodejs"

import { type NextRequest, NextResponse } from "next/server"
import { sql } from "@/lib/db"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ GMT
function getCurrentGMTDate(): string {
  const now = new Date()
  const year = now.getUTCFullYear()
  const month = String(now.getUTCMonth() + 1).padStart(2, "0")
  const day = String(now.getUTCDate()).padStart(2, "0")
  return `${year}-${month}-${day}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—á–µ—Ä–∞—à–Ω–µ–π –¥–∞—Ç—ã –≤ GMT
function getYesterdayGMTDate(): string {
  const yesterday = new Date()
  yesterday.setUTCDate(yesterday.getUTCDate() - 1)
  const year = yesterday.getUTCFullYear()
  const month = String(yesterday.getUTCMonth() + 1).padStart(2, "0")
  const day = String(yesterday.getUTCDate()).padStart(2, "0")
  return `${year}-${month}-${day}`
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü
async function ensureTablesExist() {
  try {
    console.log("üîß Ensuring database schema is correct...")

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É daily_checkins –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await sql`
      CREATE TABLE IF NOT EXISTS daily_checkins (
        id SERIAL PRIMARY KEY,
        fid TEXT NOT NULL,
        username TEXT NOT NULL,
        checkin_date DATE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(fid, checkin_date)
      )
    `

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_balances –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await sql`
      CREATE TABLE IF NOT EXISTS user_balances (
        id SERIAL PRIMARY KEY,
        fid TEXT UNIQUE NOT NULL,
        username TEXT NOT NULL,
        balance INTEGER DEFAULT 1000,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ daily_checkins
    try {
      await sql`ALTER TABLE daily_checkins ADD COLUMN IF NOT EXISTS streak INTEGER DEFAULT 1`
      console.log("‚úÖ Added streak column")
    } catch (error) {
      console.log("‚ÑπÔ∏è Streak column already exists or error:", error)
    }

    try {
      await sql`ALTER TABLE daily_checkins ADD COLUMN IF NOT EXISTS reward INTEGER DEFAULT 10`
      console.log("‚úÖ Added reward column")
    } catch (error) {
      console.log("‚ÑπÔ∏è Reward column already exists or error:", error)
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è
    await sql`UPDATE daily_checkins SET streak = 1 WHERE streak IS NULL`
    await sql`UPDATE daily_checkins SET reward = 10 WHERE reward IS NULL`

    console.log("‚úÖ Database schema verified and updated")
  } catch (error) {
    console.error("‚ùå Error ensuring tables exist:", error)
    throw error
  }
}

// GET - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å daily check-in
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const fid = searchParams.get("fid")

    if (!fid) {
      return NextResponse.json({ error: "Missing fid parameter" }, { status: 400 })
    }

    console.log(`üìÖ GET /api/daily-checkin: Getting status for FID ${fid}`)

    await ensureTablesExist()

    const today = getCurrentGMTDate()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º check-in —Å–µ–≥–æ–¥–Ω—è
    const todayCheckin = await sql`
      SELECT * FROM daily_checkins 
      WHERE fid = ${fid} AND checkin_date = ${today}
    `

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π check-in –¥–ª—è streak
    const lastCheckin = await sql`
      SELECT checkin_date, COALESCE(streak, 1) as streak FROM daily_checkins 
      WHERE fid = ${fid} 
      ORDER BY checkin_date DESC 
      LIMIT 1
    `

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ check-ins
    const totalCheckins = await sql`
      SELECT COUNT(*) as count FROM daily_checkins 
      WHERE fid = ${fid}
    `

    const hasCheckedInToday = todayCheckin.length > 0
    const currentStreak = lastCheckin.length > 0 ? lastCheckin[0].streak || 0 : 0
    const totalCount = totalCheckins[0]?.count || 0
    const lastCheckInDate = lastCheckin.length > 0 ? lastCheckin[0].checkin_date : null

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ streak –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    const streakDates: string[] = []
    if (currentStreak > 0 && lastCheckInDate) {
      const endDate = new Date(lastCheckInDate)
      for (let i = 0; i < currentStreak; i++) {
        const date = new Date(endDate)
        date.setDate(date.getDate() - i)
        streakDates.push(date.toISOString().split("T")[0])
      }
    }

    console.log(`üìä Daily check-in status for ${fid}:`, {
      hasCheckedInToday,
      currentStreak,
      totalCount,
      lastCheckInDate,
      streakDates,
    })

    return NextResponse.json({
      hasCheckedInToday,
      alreadyChecked: hasCheckedInToday, // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ö—É–∫–æ–º
      currentStreak,
      totalCheckins: Number.parseInt(totalCount.toString()),
      lastCheckInDate,
      streakDates, // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –¥–∞—Ç –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    })
  } catch (error: any) {
    console.error("‚ùå Error getting daily check-in status:", error)
    return NextResponse.json({ error: error.message }, { status: 500 })
  }
}

// POST - –≤—ã–ø–æ–ª–Ω–∏—Ç—å daily check-in
export async function POST(request: NextRequest) {
  try {
    console.log("üìÖ POST /api/daily-checkin: Starting daily check-in process")

    const body = await request.json()
    const { fid, username } = body

    console.log("üìÖ Request data:", { fid, username })

    if (!fid || !username) {
      console.error("‚ùå Missing required fields:", { fid, username })
      return NextResponse.json({ error: "Missing required fields: fid, username" }, { status: 400 })
    }

    await ensureTablesExist()

    const today = getCurrentGMTDate()
    const yesterday = getYesterdayGMTDate()
    const reward = 10

    console.log(`üìÖ Processing check-in for ${username} (${fid}) on ${today}`)

    // –†–£–ß–ù–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –¥–ª—è Neon Serverless
    try {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await sql`BEGIN`

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ check-in —Å–µ–≥–æ–¥–Ω—è
      const existingCheckin = await sql`
        SELECT * FROM daily_checkins 
        WHERE fid = ${fid} AND checkin_date = ${today}
      `

      if (existingCheckin.length > 0) {
        await sql`ROLLBACK`
        console.log("‚ö†Ô∏è Already checked in today")
        return NextResponse.json(
          {
            error: "Already checked in today",
            message: "You have already claimed your daily reward today. Come back tomorrow!",
          },
          { status: 400 },
        )
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π check-in –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ streak
      const lastCheckin = await sql`
        SELECT checkin_date, COALESCE(streak, 0) as streak FROM daily_checkins 
        WHERE fid = ${fid} 
        ORDER BY checkin_date DESC 
        LIMIT 1
      `

      let newStreak = 1
      if (lastCheckin.length > 0) {
        const lastDate = lastCheckin[0].checkin_date
        const lastStreak = lastCheckin[0].streak || 0

        console.log(`üìà Last check-in: ${lastDate}, last streak: ${lastStreak}`)
        console.log(`üìÖ Yesterday: ${yesterday}, Today: ${today}`)

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const lastDateStr = new Date(lastDate).toISOString().split("T")[0]

        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π check-in –±—ã–ª –≤—á–µ—Ä–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º streak
        if (lastDateStr === yesterday) {
          newStreak = lastStreak + 1
          console.log(`üî• Streak continued: ${newStreak}`)
        } else if (lastDateStr === today) {
          // –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ
          console.log(`‚ö†Ô∏è Already checked in today - this shouldn't happen`)
          newStreak = lastStreak
        } else {
          console.log(`üîÑ Streak reset to 1 (gap between ${lastDateStr} and ${today})`)
          newStreak = 1
        }
      } else {
        console.log(`üÜï First check-in ever`)
      }

      // 3. –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π check-in —Å streak –∏ reward
      const checkinResult = await sql`
        INSERT INTO daily_checkins (fid, username, checkin_date, streak, reward, created_at)
        VALUES (${fid}, ${username}, ${today}, ${newStreak}, ${reward}, CURRENT_TIMESTAMP)
        RETURNING id, fid, username, checkin_date, streak, reward
      `

      if (checkinResult.length === 0) {
        await sql`ROLLBACK`
        throw new Error("Failed to create check-in record")
      }

      console.log("‚úÖ Check-in record created:", checkinResult[0])

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = await sql`
        SELECT balance FROM user_balances WHERE fid = ${fid}
      `

      let newBalance
      if (existingUser.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const balanceResult = await sql`
          UPDATE user_balances 
          SET balance = balance + ${reward}, updated_at = CURRENT_TIMESTAMP
          WHERE fid = ${fid}
          RETURNING balance
        `

        if (balanceResult.length === 0) {
          await sql`ROLLBACK`
          throw new Error("Failed to update user balance")
        }

        newBalance = balanceResult[0]?.balance
        console.log(`üí∞ Updated existing user balance: ${newBalance}`)
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º + reward
        const newUserResult = await sql`
          INSERT INTO user_balances (fid, username, balance, created_at, updated_at)
          VALUES (${fid}, ${username}, ${1000 + reward}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
          RETURNING balance
        `

        if (newUserResult.length === 0) {
          await sql`ROLLBACK`
          throw new Error("Failed to create user balance")
        }

        newBalance = newUserResult[0]?.balance
        console.log(`üë§ Created new user with balance: ${newBalance}`)
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await sql`COMMIT`

      console.log(`‚úÖ Daily check-in transaction completed successfully`)

      return NextResponse.json({
        success: true,
        reward: reward,
        // –£–±–∏—Ä–∞–µ–º newBalance –∏–∑ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        streak: newStreak,
        date: today,
        message: `Daily check-in successful! +${reward} OINK (Day ${newStreak})`,
      })
    } catch (txError: any) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      try {
        await sql`ROLLBACK`
      } catch (rollbackError) {
        console.error("‚ùå Rollback error:", rollbackError)
      }

      console.error("‚ùå Transaction error:", txError)
      throw txError
    }
  } catch (error: any) {
    console.error("‚ùå Error in daily-checkin:", error)
    console.error("‚ùå Error stack:", error.stack)

    return NextResponse.json(
      {
        error: error.message || "Daily check-in failed",
        details: process.env.NODE_ENV === "development" ? error.stack : undefined,
      },
      { status: 500 },
    )
  }
}
