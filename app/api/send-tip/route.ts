export const runtime = "nodejs"

import { type NextRequest, NextResponse } from "next/server"
import { sql } from "@/lib/db"
import { initializeDatabase } from "@/lib/init-db"

export async function POST(request: NextRequest) {
  try {
    console.log("üí∏ POST /api/send-tip: Starting tip transaction")
    await initializeDatabase()

    const body = await request.json()
    const { fromFid, fromUsername, toFid, toUsername, amount } = body
    const tipAmount = Number(amount)

    console.log(`üí∏ Tip request: ${tipAmount} OINK from ${fromUsername} (${fromFid}) to ${toUsername} (${toFid})`)

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!fromFid || !fromUsername || !toFid || !toUsername || !amount) {
      return NextResponse.json(
        { error: "Missing required fields: fromFid, fromUsername, toFid, toUsername, amount" },
        { status: 400 },
      )
    }

    if (tipAmount <= 0 || isNaN(tipAmount)) {
      return NextResponse.json({ error: "Amount must be greater than 0" }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≥–æ—Å—Ç—å
    if (fromFid.startsWith("guest_")) {
      return NextResponse.json({ error: "Guest users cannot send tips" }, { status: 403 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≥–æ—Å—Ç—å
    if (toFid.startsWith("guest_")) {
      return NextResponse.json({ error: "Cannot send tips to guest users" }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ø–æ FID)
    const senderResult = await sql`
      SELECT balance, username FROM user_balances WHERE fid = ${fromFid}
    `

    if (senderResult.length === 0) {
      return NextResponse.json({ error: "Sender not found in database" }, { status: 404 })
    }

    const senderBalance = Number(senderResult[0]?.balance) || 0

    if (senderBalance < tipAmount) {
      console.log(`‚ùå Insufficient balance: ${senderBalance} < ${tipAmount}`)
      return NextResponse.json({ error: "Insufficient balance" }, { status: 400 })
    }

    // –ù–ê–ß–ò–ù–ê–ï–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ
    await sql`BEGIN`

    try {
      // –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ø–æ FID)
      await sql`
        UPDATE user_balances 
        SET balance = balance - ${tipAmount}, updated_at = CURRENT_TIMESTAMP
        WHERE fid = ${fromFid}
      `

      console.log(`‚úÖ Deducted ${tipAmount} OINK from ${fromUsername} (${fromFid})`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ (—Ç–æ–ª—å–∫–æ –ø–æ FID)
      const existingRecipient = await sql`
        SELECT fid, balance, username FROM user_balances 
        WHERE fid = ${toFid}
      `

      if (existingRecipient.length === 0) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await sql`
          INSERT INTO user_balances (fid, username, balance, created_at, updated_at)
          VALUES (${toFid}, ${toUsername}, ${tipAmount}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        `
        console.log(`‚úÖ Created new recipient ${toUsername} (${toFid}) with ${tipAmount} OINK`)
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ø–æ FID)
        const oldBalance = Number(existingRecipient[0].balance) || 0
        await sql`
          UPDATE user_balances
          SET balance = balance + ${tipAmount}, updated_at = CURRENT_TIMESTAMP
          WHERE fid = ${toFid}
        `
        console.log(`‚úÖ Updated ${toUsername} balance: ${oldBalance} -> ${oldBalance + tipAmount}`)
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ FID
      await sql`
        INSERT INTO transactions (from_fid, to_fid, amount, reason, created_at)
        VALUES (${fromFid}, ${toFid}, ${tipAmount}, 'tip', CURRENT_TIMESTAMP)
      `

      // –ö–û–ú–ú–ò–¢–ò–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ
      await sql`COMMIT`

      console.log(`‚úÖ Transaction completed: ${fromFid} -> ${toFid}, amount: ${tipAmount}`)

      return NextResponse.json({
        success: true,
        message: "Tip sent successfully",
        tipAmount,
        from: fromUsername,
        to: toUsername,
        fromFid,
        toFid,
      })
    } catch (error) {
      // –û–¢–ö–ê–¢–´–í–ê–ï–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ –í –°–õ–£–ß–ê–ï –û–®–ò–ë–ö–ò
      await sql`ROLLBACK`
      throw error
    }
  } catch (error: any) {
    console.error("‚ùå Send-tip error:", error)
    return NextResponse.json(
      {
        error: error.message || "Failed to send tip",
        details: error.toString(),
      },
      { status: 500 },
    )
  }
}
