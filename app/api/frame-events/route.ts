import { type NextRequest, NextResponse } from "next/server"

export async function POST(req: NextRequest) {
  try {
    const body = await req.json()
    console.log("Frame event received:", body)

    const { untrustedData } = body
    const { fid, messageHash, network, timestamp } = untrustedData || {}

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if (body.type === "frame_added") {
      console.log(`üéâ Mini App added by user ${fid}`)

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      // await saveFrameEvent(fid, 'frame_added', timestamp)

      return NextResponse.json({
        success: true,
        message: "Frame added successfully",
      })
    }

    if (body.type === "notifications_enabled") {
      console.log(`üîî Notifications enabled by user ${fid}`)
      return NextResponse.json({
        success: true,
        message: "Notifications enabled",
      })
    }

    if (body.type === "notifications_disabled") {
      console.log(`üîï Notifications disabled by user ${fid}`)
      return NextResponse.json({
        success: true,
        message: "Notifications disabled",
      })
    }

    if (body.type === "frame_removed") {
      console.log(`‚ùå Mini App removed by user ${fid}`)
      return NextResponse.json({
        success: true,
        message: "Frame removed",
      })
    }

    return NextResponse.json({
      success: true,
      message: "Event processed",
    })
  } catch (error) {
    console.error("Frame event error:", error)
    return NextResponse.json({ error: "Failed to process frame event" }, { status: 500 })
  }
}
